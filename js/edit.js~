var stage = 1, //stores current stage in which the process of project creation is and allows only those modals
	mode=2, //0 for basic, 1 for advanced, 2 for none
	currentPic=0, //index in array of pictures of current picture in the preview carousel
	currentPicName, //full path of current pic
	currentTestPic=0, //index in array of test pictures of current picture in the preview carousel
	currentTestPicName, //full path of current test pic
	editorId=0, //id of currently chosen editor for viewing test images
	projectName, //name given to project
	email, //email of user
	projInstr, //project instructions for editor
	xmleditor, //xhr object to fetch editors
	uploadedPictures, //array of names of all uploaded pictures
	projectId=0, //project id received from server. 0 means project not added to db yet
	uploadStart = false; //flag to check if upload has started
	uploadComp = false; //flag to check if upload has completed
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmleditor=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmleditor=new ActiveXObject("Microsoft.XMLHTTP");
  }

//function to check stage that the process is in and only allow the modal for that stage. any other hash change is rejected
window.onload = window.onhashchange = function() {
	if(window.location.hash!='#!' && window.location.hash!='')
	{
		document.getElementById("popupProgress").style.visibility = "hidden";
		window.arrowSlide = false;
		switch(stage)
		{
			case 1: if(window.location.hash!='#basic-upload-photos')
					{window.location.hash = '!';}
					break;
			case 2: if(window.location.hash != '#basic-testprev')
					{window.location.hash = 'basic-uploading';}
					break;
			case 3: if(window.location.hash!='#basic-instr' && window.location.hash != '#basic-testprev' && window.location.hash!='#basic-summary')
					{window.location.hash = 'basic-imagesprev';}
					break;
		}
	}
	else
	{
		window.arrowSlide = true;
		switch(stage)
		{
			case 2: if(uploadStart)
					{document.getElementById("popupProgress").style.visibility = "visible"; break;}
			case 3: document.getElementById("popupProgress").style.visibility = "visible"; break;
		}
	}
}

//sets the mode when basic or advanced project is created
function setMode(newMode) {
	switch(newMode)
	{
		case 0: //basic editing mode
			var elems = document.getElementsByClassName("largermodalhead");
			for(var i=0;i<elems.length;i++)
			{
				elems[i].innerHTML = "Basic";
				elems[i].className = "largermodalhead greenc";
			}
			elems = document.getElementsByClassName("smallermodalhead");
			for(i=0;i<elems.length;i++)
				elems[i].className = "smallermodalhead greenc";
			document.getElementById("formMode").value="0";
			document.getElementById("picinstr").style.visibility = "hidden";
			mode = 0;
			break;
		case 1: //advanced editing mode
			var elems = document.getElementsByClassName("largermodalhead");
			for(var i=0;i<elems.length;i++)
			{
				elems[i].innerHTML = "Advanced";
				elems[i].className = "largermodalhead bluec";
			}
			elems = document.getElementsByClassName("smallermodalhead");
			for(i=0;i<elems.length;i++)
				elems[i].className = "smallermodalhead bluec";
			document.getElementById("formMode").value="1";
			document.getElementById("picinstr").style.visibility = "visible";
			mode = 1;
			break;	
		case 2: //reset the page so that another project can be created
			stage = 1;
			mode = 2;
			projectName = '';
			email = '';
			projInstr = '';
			projectId = 0;
			uploadStart = false;
			uploadComp = false;
			uploadedPictures = null;
			
			//set all editor prefs to false and add new ones
			var editors = document.getElementById('editorlist').getElementsByClassName("editor");
			for(var i=0;i<3;i++)
			{
				if(editors[i].dataset.chosen == "true")
					prefToggle(editors[i]);
			}
			addToList(getEditors(3));
			
			//remove all images from preview modal
			var imgs = document.getElementsByClassName("previmgdiv");
		  	for(i=imgs.length-1;i>=0;i--)
		  		imgs[i].parentNode.removeChild(imgs[i]);
			
			
			//remove warning when unloading page
			window.onbeforeunload = null;
	}
}

//on clicking ok button in summary page
document.getElementById("finishProj").onclick = function() {

	//checking validity of email
	var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	if(!re.test(document.getElementById("finEmail").value))
	{
		alert("Please enter a valid email");
		return false;
	}
	
	//checking if project name is set and not just a series of spaces
	if(document.getElementById("finProjName").value == null || document.getElementById("finProjName").value.replace(/\s/g,"") == "")
	{
		alert("Please enter a valid project name");
		return false;
	}
	
	finaliseProj();
	setMode(2);
	window.location.hash='!';
}

//ajax call to server to finalise the project
function finaliseProj()  {
	xhr = new XMLHttpRequest();
	xhr.open("POST","ajax/finalise.php",true);
	xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded");
	//get final email, project name and instructions
	email = document.getElementById("finEmail").value;
	projectName = document.getElementById("finProjName").value;
	projectInstr = document.getElementById("finprojinstrfeditor").value;
	
	//get editor preferences
	var prefs = '';
	var editors = document.getElementById('editorlist').getElementsByClassName("editor");
	for(var i=0;i<3;i++)
	{
		if(editors[i].dataset.chosen == "true")
			prefs+="&pref[]="+editors[i].dataset.id;
	}
	xhr.send("id="+projectId+"&name="+projectName+"&email="+email+"&instructions="+projectInstr+prefs);
}

//on clicking on basic editing button
document.getElementById("basicup").onclick = function() {
 	if(stage == 1)
	 	setMode(0);
 	modal = document.getElementById(this.dataset.modal);
 	window.location.hash = this.dataset.modal;
}

//on clicking advanced editing button
document.getElementById("advup").onclick = function() {
	if(stage == 1)
	 	setMode(1);
 	modal = document.getElementById(this.dataset.modal);
 	window.location.hash = this.dataset.modal;
}

//preview images button onclick listener ie after uploading pictures
document.getElementById("previewButton").onclick = function() {
	if(uploadComplete)
		stage=3;
 	modal = document.getElementById(this.dataset.modal);
 	window.location.hash = this.dataset.modal;
}

//after giving instructions, proceed to summary
document.getElementById("summaryButton").onclick = function() {
	document.getElementById("summhead").querySelector("input").value = projectName;
	document.getElementById("summl").innerHTML = "<span>Project No</span> "+projectId;
	document.getElementById("summr").querySelector("input").value = email;
	document.getElementById("summc").querySelector("span").innerHTML = uploadedPictures.length;
	document.getElementById("finprojinstrfeditor").value = projInstr;
	window.location.hash = this.dataset.modal;
}

//on clicking upload files, validate form
document.getElementById("uploadButton").onclick = function() {
	modal = document.getElementById(this.dataset.modal);
	
	//checking if pictures have been selected
	if(document.getElementById("fileToUpload").files.length<=0)
	{
		alert("Please select some photos");
		return false;
	}
	
	//checking validity of email
	var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	if(!re.test(document.getElementById("userEmail").value))
	{
		alert("Please enter a valid email");
		return false;
	}
	
	//checking if project name is set and not just a series of spaces
	if(document.getElementById("projectName").value == null || document.getElementById("projectName").value.replace(/\s/g,"") == "")
	{
		alert("Please enter a valid project name");
		return false;
	}
	projectName = document.getElementById("projectName").value;
 	email = document.getElementById("userEmail").value;
 	projInstr = document.getElementById("projinstrfeditor").value;
 	uploadStart = true;
	stage = 2;
	
	//set onbeforeunload to prevent user from accidentally closing page
	window.onbeforeunload = function() {
		return "You have created a project.\nLeaving the page will scrap it!";
	}
	uploadFile();
	window.location.hash = this.dataset.modal;
}

//ajax call to save instruction for a particular picture
function saveInstr() {
	var instr = document.getElementById("instrfeditor").value;
	xmleditor.open("POST","ajax/saveInstr.php",true);
	xmleditor.setRequestHeader("Content-type","application/x-www-form-urlencoded");
	xmleditor.send("instr="+instr+"&id="+uploadedPictures[currentPic]['id']);
	uploadedPictures[currentPic]['instr'] = instr;
}

//general event listener for modal close buttons
var modalCloseButtons = document.getElementsByClassName('modalCloseButton');
for(var i=0; i<modalCloseButtons.length; i++)
{
		modalCloseButtons[i].onclick = function() {
			if(projectId!=0)
			{
				if(confirm("You have uploaded some pictures.\nCancelling the project will delete them and scrap the project."))
				{
					var xmlcancel = new XMLHttpRequest();
					xmlcancel.open("POST","ajax/cancel.php",false);
					xmlcancel.setRequestHeader("Content-type","application/x-www-form-urlencoded");
					xmlcancel.send("id="+projectId);
					setMode(2);
				}
				else
					return false;
			}
			window.location.hash = '!';
		}
}

//on clicking on a particular picture, bring it up in the preview carousel
function setPic() {
	
	//iterate through uploadedPictures to find index of image clicked on
	for(var i=0;i < uploadedPictures.length;i++)
		if("pictures/projects/project" + projectId + "/orginal/" + uploadedPictures[i]['name']==currentPicName)
		{
			currentPic=i; //store index of pic which will be used later to move forward and backward in the carousel
			break;
		}
	document.getElementById("prevpic").src = currentPicName;
	
	//load instruction for that image if specified earlier
	if(uploadedPictures[currentPic]['instr']!=undefined)
		document.getElementById("instrfeditor").value = uploadedPictures[currentPic]['instr'];
	else
		document.getElementById("instrfeditor").value = '';
}

//goes to next pic in preview carousel if action>0 and previous if action<0
function changePic(action) {
	if(action > 0)
		if(currentPic >= uploadedPictures.length-1)
			currentPic = 0;
		else
			currentPic++;
	if(action < 0)
		if(currentPic <= 0)
			currentPic = uploadedPictures.length - 1;
		else
			currentPic--;
	document.getElementById("prevpic").src = "pictures/projects/project" + projectId + "/original/" + uploadedPictures[currentPic]['name'];
}

//event listener for all image pairs listed near editors
testpiclinks = document.getElementsByClassName("testpiclink");
for(i=0;i<testpiclinks.length;i++)
	testpiclinks[i].onclick = function() {
		editorId = this.parentNode.parentNode.dataset.id;
		currentTestPicName = this.querySelector("div").dataset.pic;
		setTestPic();
	}

//on clicking on a particular picture, bring it up in the preview carousel
function setTestPic() {
	
	//iterate through uploadedPictures to find index of image clicked on
	for(var i=0;i < testImgs.length;i++)
		if("pictures/editors/editor" + editorId + "/" + testImgs[i]==currentTestPicName)
		{
			currentTestPic=i; //store index of pic which will be used later to move forward and backward in the carousel
			break;
		}
	document.getElementById("prevtestpic").src = "pictures/tests/" + currentTestPicName;
	document.getElementById("preveditedpic").src = "pictures/editors/editor"+editorId+"/"+currentTestPicName;
}

//goes to next pic in preview carousel if action>0 and previous if action<0
function changeTestPic(action) {
	if(action > 0)
		if(currentTestPic >= testImgs.length-1)
			currentTestPic = 0;
		else
			currentTestPic++;
	if(action < 0)
		if(currentTestPic <= 0)
			currentTestPic = testImgs.length - 1;
		else
			currentTestPic--;
	document.getElementById("preveditedpic").src = "pictures/editors/editor"+editorId+"/"+testImgs[currentTestPic];
	document.getElementById("prevtestpic").src = "pictures/tests/"+testImgs[currentTestPic];
}

//ajax call to delete an uploaded image by id
function deleteImage(id) {
	xmleditor.open("POST","ajax/deleteImage.php",false);
	xmleditor.setRequestHeader("Content-type","application/x-www-form-urlencoded");
	xmleditor.send("id="+id);
}

//add images in the preview pictures modal
function prevPictures() {
	//for each uploaded picture, create a div in the preview modal
	for(var i=0;i<uploadedPictures.length;i++)
	{
		pic = document.createElement("img");
		div = document.createElement("div");
		div.className = 'previmgdiv';
		button = document.createElement("button");
		button.innerHTML = "X";
		a = document.createElement("a");
		a.href = "#basic-instr";
		a.onclick = function() {
			currentPicName = this.querySelector("img").src;
			setPic();
		}
		
		//deleting image
		button.onclick = function() {
			deleteImage(this.parentNode.querySelector("img").dataset.id);
			for(var i=0;i < uploadedPictures.length;i++)
				if(uploadedPictures[i]['id']==this.parentNode.querySelector("img").dataset.id)
				{
					currentPic=i;
					break;
				}
			uploadedPictures.splice(i,1); //remove from uploaded pictures array
			this.parentNode.parentNode.removeChild(this.parentNode); //delete div
		}
		
		a.appendChild(pic);
		div.appendChild(a);
		div.appendChild(button);
		pic.src = "pictures/projects/project"+projectId+"/original/"+uploadedPictures[i]['name'];
		pic.dataset.id=uploadedPictures[i]['id']; //passed to server when deleting pic
		document.getElementById("picsprev").insertBefore(div,document.getElementById("prevClearDiv"));
	}
}

//get 'num' number of editors from the server via ajax. 'not' is the array of id of editors currently on screen so that the server does not include them in the search for new ones
function getEditors(num) {
	xmleditor.open("POST","ajax/getEditors.php",false);
	xmleditor.setRequestHeader("Content-type","application/x-www-form-urlencoded");
	var editors = document.getElementById('editorlist').getElementsByClassName("editor");
	var not = new Array();
	for(var j=0;j<editors.length;j++)
		not[not.length] = editors[j].dataset.id;
	xmleditor.send("num="+num+"&not[]="+not[0]+"&not[]="+not[1]+"&not[]="+not[2]);
	return JSON.parse(xmleditor.responseText);
}

//adds the list of editors to preferences modal
function addToList(newEditorList) {
	var i=0;
	var editors = document.getElementById('editorlist').getElementsByClassName("editor");
	//if there were less than 3 editors being shown before then first extend the list to include new ones
	for(var j=0;j<3;j++)
	{
		if(editors[j].style.visibility=="hidden")
		{
			if(newEditorList != null && i in newEditorList)
			{
				editors[j].querySelector("#EditorName").innerHTML = newEditorList[i].firstname + ' ' + newEditorList[i].lastname;
				editors[j].dataset.id = newEditorList[i].id;
				editors[j].style.visibility = 'visible';
				testpics = editors[j].getElementsByClassName("testpic");
				for(var k=0;k<testpics.length;k++)
				{
					testpics[k].dataset.pic = testImgs[k];
					testpics[k].querySelector(".test").src="pictures/tests/"+testImgs[k];
					testpics[k].querySelector(".edited").src="pictures/editors/editor"+editors[j].dataset.id+"/"+testImgs[k];
				}
				i++;
			}
		}
	}
	//after extending the list, if new editors are left then replace the unchosen editors with them
	if(newEditorList != null && i in newEditorList)
		for(j=0;j<3;j++)
		{
			if(editors[j].dataset.chosen=="false")
			{
				if(newEditorList[i])
				{
					editors[j].querySelector("#EditorName").innerHTML = newEditorList[i].name;
					editors[j].dataset.id = newEditorList[i].id;
					editors[j].style.visibility = 'visible';
					testpics = editors[j].getElementsByClassName("testpic");
					for(var k=0;k<testpics.length;k++)
					{
						testpics[k].dataset.pic = testImgs[k];
						testpics[k].querySelector(".test").src="pictures/tests/"+testImgs[k];
						testpics[k].querySelector(".edited").src="pictures/editors/editor"+editors[j].dataset.id+"/"+testImgs[k];
					}
					i++;
				}
			}
		}	
}

//counts number of editors which are not chosen yet and replaces them with new ones
function moreEditors() {
	var editors = document.getElementById('editorlist').getElementsByClassName("editor");
	var count =0;
	for(var i=0;i<3;i++)
	{
		if(editors[i].dataset.chosen == "false")
			count++;
	}	
	addToList(getEditors(count));
}

//toggle chosen attrubute of a particular editor between true and false and change the star icon accordingl
function prefToggle(elem) {
	if(elem.parentNode.parentNode.dataset.chosen == "false")
	{
		elem.src="images/selected.png";
		elem.parentNode.parentNode.dataset.chosen="true";
	}
	else
	{
		elem.src="images/unselected.png";
		elem.parentNode.parentNode.dataset.chosen="false";
	}
}

//if file is selected then populate its details. if none are selected then hide the existing details being shown
function fileSelected() {
	var files = document.getElementById('fileToUpload').files;
	//if no files selected then show upload file and select file buttons else hide them
	if(files.length>0)
	{
		document.getElementById("uploaddiv").style.visibility="visible";
		document.getElementById("uploadButton2").style.visibility="visible";
	}
	else
	{
		stage = 1;
		document.getElementById("uploaddiv").style.visibility="hidden";
		document.getElementById("uploadButton2").style.visibility="hidden";
	}
	
	//calculate size of pictures chosen
  	var fileSize = 0;
  	if(files)
	  for(var i=0;i<files.length;i++)
	  	fileSize += files[i].size;
	if (fileSize > 1024 * 1024)
  		fileSize = (Math.round(fileSize * 100 / (1024 * 1024)) / 100).toString() + 'MB';
	else
		fileSize = (Math.round(fileSize * 100 / 1024) / 100).toString() + 'KB';   
	var filedetdiv = document.getElementsByClassName("post_upload");
	for(i=0;i<filedetdiv.length;i++)
		if(files.length == 1)
			filedetdiv[i].innerHTML = files.length + " photo ("+ fileSize +") selected!";
		else
			filedetdiv[i].innerHTML = files.length + " photos ("+ fileSize +") selected!";
}

//ajax call to start uploading files
function uploadFile() {
  var xhr = new XMLHttpRequest();
  document.getElementById("formProjId").value = projectId; //add project id to form so that server can reference to it
  var buttons = document.getElementsByClassName("label_upload"); //hide all select file buttons
  for(i=0;i<buttons.length;i++)
  	buttons[i].style.visibility = "hidden";
  document.getElementById("uploadButton2").style.visibility="hidden"; //hide upload button in the preivew modal
  
  //display the progress bar
  var num = document.getElementsByClassName('progressNumber')
  for(i=0;i<num.length;i++)
  	num[i].style.visibility='visible';
  var fd = new FormData(document.getElementById('projectDetails'));
  /* event listeners */
  xhr.upload.addEventListener("progress", uploadProgress, false);
  xhr.addEventListener("load", uploadComplete, false);
  xhr.addEventListener("error", uploadFailed, false);
  xhr.addEventListener("abort", uploadCanceled, false);
  /* Be sure to change the url below to the url of your upload server side script */
  xhr.open("POST", "ajax/upload.php");
  xhr.send(fd); //let the uploading roll!
}

function uploadProgress(evt) {
  if (evt.lengthComputable) {
    var percentComplete = Math.round(evt.loaded * 100 / evt.total);
    //set upload progress in the bars
    divs = document.getElementsByClassName('progressNumber');
    for(var i=0;i<divs.length;i++)
    {
    	divs[i].querySelector(".greenbar").style.width = percentComplete.toString() + '%';
    	divs[i].querySelector(".bluebar").style.width = (100-percentComplete).toString() + '%';
    	divs[i].querySelector(".uploadper").innerHTML = percentComplete.toString() + "<span style='color:#3399CC'>%</span>";
  	}
  }
  else {
    divs = document.getElementsById('progressNumber');
    for(var i=0;i<divs.length;i++)
    {
    	divs[i].querySelector(".greenbar").style.width = '0';
    	divs[i].querySelector(".bluebar").style.width = '100%';
    	divs[i].querySelector(".uploadper").innerHTML = 'Cannot compute';
  	}
  }
}

function uploadComplete(evt) {
  // This event is raised when the server send back a response
  uploadStart = false;
  uploadComp = true;
  var resp = JSON.parse(evt.srcElement.responseText);
  if(uploadedPictures == undefined)
	uploadedPictures = resp.files; //if pictures weren't added previously
  else
	uploadedPictures = uploadedPictures.concat(resp.files);	//if new pictures were added
  projectId = resp.projectId; //update project id
  
  var upStage = document.getElementsByClassName('uploadStage')
  for(var i=0;i<upStage.length;i++)
  	upStage[i].innerHTML='Upload completed';
  
  document.getElementById("uploadButton2").style.visibility="hidden"; //show upload file button again
  
  var num = document.getElementsByClassName('progressNumber'); //hide progress bar
  for(i=0;i<num.length;i++)
  	num[i].style.visibility='hidden';

  var buttons = document.getElementsByClassName("label_upload"); //show select files button
  for(i=0;i<buttons.length;i++)
  	buttons[i].style.visibility = "visible";
  	
	document.getElementById("fileToUpload").value=''; //reset file input
	document.getElementById("projectName").value=''; //reset project name form field
	document.getElementById("userEmail").value=''; //reset email form field
	document.getElementById("projinstrfeditor").value=''; //reset instructions form field
	
	postuploads = document.getElementsByClassName("post_upload");
	for(i=0;i<postuploads.length;i++)
		postuploads[i].innerHTML = '';

//remove all images from preview modal and populate them again
	var imgs = document.getElementsByClassName("previmgdiv");
  	for(i=imgs.length-1;i>=0;i--)
  		imgs[i].parentNode.removeChild(imgs[i]);
  prevPictures();
}

function uploadFailed(evt) {
	var num = document.getElementsByClassName('progressNumber');
  for(i=0;i<num.length;i++)
  	num[i].style.visibility='hidden';
  alert("There was an error attempting to upload the file.");
}

function uploadCanceled(evt) {
  alert("The upload has been canceled by the user or the browser dropped the connection.");
}  

//on first run, get new editors and show for giving preferences
addToList(getEditors(3));
